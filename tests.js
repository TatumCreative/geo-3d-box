var Box = require('./box')
  , _ = require('lodash')
  , test = require('tape')

function boxSize( positions, d ) {
	
	var vecs = _.chunk( positions, 3 )
	var max = _.reduce( vecs, function( memo, vec ) {
		return Math.max( memo, vec[d] )
	}, 0)
	var min = _.reduce( vecs, function( memo, vec ) {
		return Math.min( memo, vec[d] )
	}, 0)
	
	return max - min
}

function average( positions ) {
	var vecs = _.chunk( positions, 3 )

	var average = _.reduce( vecs, function( memo, vec ) {

		memo[0] += vec[0] / vecs.length
		memo[1] += vec[1] / vecs.length
		memo[2] += vec[2] / vecs.length

		return memo

	}, [0,0,0])
	
	average[0] = average[0] < 0.00001 ? 0 : average[0]
	average[1] = average[1] < 0.00001 ? 0 : average[1]
	average[2] = average[2] < 0.00001 ? 0 : average[2]
	
	return average
}
test("box", function(t) {
	
	
	t.test("- returns positions, uvs, and cells", function(t) {
		
		t.plan(4)

		var box = Box()
		var keys = _.sortBy( _.keys(box), function( key ) {
			return key
		})
		
		t.isEquivalent( keys, ["cells", "positions", "uvs"] )
		t.equal( _.isArray( box.positions ), true )
		t.equal( _.isArray( box.uvs ), true )
		t.equal( _.isArray( box.cells ), true )
		
	})

	t.test("- default width 1", function(t) {
		
		t.plan(3)

		var box = Box()
		
		t.equal( boxSize( box.positions, 0 ), 1 )
		t.equal( boxSize( box.positions, 1 ), 1 )
		t.equal( boxSize( box.positions, 2 ), 1 )
	})

	t.test("- can set size", function(t) {
		
		t.plan(3)

		var box = Box({
			size: [2,3,4]
		})
		
		t.equal( boxSize( box.positions, 0 ), 2 )
		t.equal( boxSize( box.positions, 1 ), 3 )
		t.equal( boxSize( box.positions, 2 ), 4 )
	})
	
	t.test("- is about the origin", function(t) {
		
		t.plan(3)

		var boxA = Box({
			size: [2,3,4]
		})
		var boxB = Box()
		var boxC = Box({
			size: [2,3,4]
		  , segments: [2,3,4]
		})
		
		var avgA = average( boxA.positions )
		var avgB = average( boxB.positions )
		var avgC = average( boxC.positions )
		
		t.isEquivalent( avgA , [0,0,0] )
		t.isEquivalent( avgB , [0,0,0] )
		t.isEquivalent( avgC , [0,0,0] )
	})
	
	t.test("- can generate a box correctly", function( t ) {
		
		t.plan(3)
		
		var box1 = {
			positions : [-0.5,-0.5,0.5,0.5,-0.5,0.5,-0.5,0.5,0.5,0.5,0.5,0.5,-0.5,0.5,-0.5,0.5,0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,0.5,0.5,0.5,0.5,-0.5,-0.5,0.5,-0.5,0.5,-0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,0.5,0.5,0.5,0.5,0.5,-0.5,0.5,-0.5,0.5,0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5,-0.5,-0.5,-0.5,0.5,0.5,-0.5,0.5],
			uvs : [0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1],
			cells : [0,1,3,3,2,0,4,5,7,7,6,4,8,9,11,11,10,8,12,13,15,15,14,12,16,17,19,19,18,16,20,21,23,23,22,20]
		}
		
		var box2 = 
		{
			positions : [-1,-1,1,0,-1,1,1,-1,1,-1,-0.33333333333333337,1,0,-0.33333333333333337,1,1,-0.33333333333333337,1,-1,0.33333333333333326,1,0,0.33333333333333326,1,1,0.33333333333333326,1,-1,1,1,0,1,1,1,1,1,-1,1,-1,0,1,-1,1,1,-1,-1,0.33333333333333337,-1,0,0.33333333333333337,-1,1,0.33333333333333337,-1,-1,-0.33333333333333326,-1,0,-0.33333333333333326,-1,1,-0.33333333333333326,-1,-1,-1,-1,0,-1,-1,1,-1,-1,1,1,-1,1,1,-0.5,1,1,0,1,1,0.5,1,1,1,1,0.33333333333333337,-1,1,0.33333333333333337,-0.5,1,0.33333333333333337,0,1,0.33333333333333337,0.5,1,0.33333333333333337,1,1,-0.33333333333333326,-1,1,-0.33333333333333326,-0.5,1,-0.33333333333333326,0,1,-0.33333333333333326,0.5,1,-0.33333333333333326,1,1,-1,-1,1,-1,-0.5,1,-1,0,1,-1,0.5,1,-1,1,-1,-1,-1,-1,-1,-0.5,-1,-1,0,-1,-1,0.5,-1,-1,1,-1,-0.33333333333333337,-1,-1,-0.33333333333333337,-0.5,-1,-0.33333333333333337,0,-1,-0.33333333333333337,0.5,-1,-0.33333333333333337,1,-1,0.33333333333333326,-1,-1,0.33333333333333326,-0.5,-1,0.33333333333333326,0,-1,0.33333333333333326,0.5,-1,0.33333333333333326,1,-1,1,-1,-1,1,-0.5,-1,1,0,-1,1,0.5,-1,1,1,-1,1,1,0,1,1,1,1,1,-1,1,0.5,0,1,0.5,1,1,0.5,-1,1,0,0,1,0,1,1,0,-1,1,-0.5,0,1,-0.5,1,1,-0.5,-1,1,-1,0,1,-1,1,1,-1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,-1,-0.5,0,-1,-0.5,1,-1,-0.5,-1,-1,0,0,-1,0,1,-1,0,-1,-1,0.5,0,-1,0.5,1,-1,0.5,-1,-1,1,0,-1,1,1,-1,1],
			uvs : [0,0,0.5,0,1,0,0,0.3333333333333333,0.5,0.3333333333333333,1,0.3333333333333333,0,0.6666666666666666,0.5,0.6666666666666666,1,0.6666666666666666,0,1,0.5,1,1,1,0,0,0.5,0,1,0,0,0.3333333333333333,0.5,0.3333333333333333,1,0.3333333333333333,0,0.6666666666666666,0.5,0.6666666666666666,1,0.6666666666666666,0,1,0.5,1,1,1,0,0,0.25,0,0.5,0,0.75,0,1,0,0,0.3333333333333333,0.25,0.3333333333333333,0.5,0.3333333333333333,0.75,0.3333333333333333,1,0.3333333333333333,0,0.6666666666666666,0.25,0.6666666666666666,0.5,0.6666666666666666,0.75,0.6666666666666666,1,0.6666666666666666,0,1,0.25,1,0.5,1,0.75,1,1,1,0,0,0.25,0,0.5,0,0.75,0,1,0,0,0.3333333333333333,0.25,0.3333333333333333,0.5,0.3333333333333333,0.75,0.3333333333333333,1,0.3333333333333333,0,0.6666666666666666,0.25,0.6666666666666666,0.5,0.6666666666666666,0.75,0.6666666666666666,1,0.6666666666666666,0,1,0.25,1,0.5,1,0.75,1,1,1,0,0,0.5,0,1,0,0,0.25,0.5,0.25,1,0.25,0,0.5,0.5,0.5,1,0.5,0,0.75,0.5,0.75,1,0.75,0,1,0.5,1,1,1,0,0,0.5,0,1,0,0,0.25,0.5,0.25,1,0.25,0,0.5,0.5,0.5,1,0.5,0,0.75,0.5,0.75,1,0.75,0,1,0.5,1,1,1],
			cells : [0,1,4,4,3,0,3,4,7,7,6,3,6,7,10,10,9,6,1,2,5,5,4,1,4,5,8,8,7,4,7,8,11,11,10,7,12,13,16,16,15,12,15,16,19,19,18,15,18,19,22,22,21,18,13,14,17,17,16,13,16,17,20,20,19,16,19,20,23,23,22,19,24,25,30,30,29,24,29,30,35,35,34,29,34,35,40,40,39,34,25,26,31,31,30,25,30,31,36,36,35,30,35,36,41,41,40,35,26,27,32,32,31,26,31,32,37,37,36,31,36,37,42,42,41,36,27,28,33,33,32,27,32,33,38,38,37,32,37,38,43,43,42,37,44,45,50,50,49,44,49,50,55,55,54,49,54,55,60,60,59,54,45,46,51,51,50,45,50,51,56,56,55,50,55,56,61,61,60,55,46,47,52,52,51,46,51,52,57,57,56,51,56,57,62,62,61,56,47,48,53,53,52,47,52,53,58,58,57,52,57,58,63,63,62,57,64,65,68,68,67,64,67,68,71,71,70,67,70,71,74,74,73,70,73,74,77,77,76,73,65,66,69,69,68,65,68,69,72,72,71,68,71,72,75,75,74,71,74,75,78,78,77,74,79,80,83,83,82,79,82,83,86,86,85,82,85,86,89,89,88,85,88,89,92,92,91,88,80,81,84,84,83,80,83,84,87,87,86,83,86,87,90,90,89,86,89,90,93,93,92,89]
		}
		
		var boxA = Box()
		var boxB = Box({
			size: [2,2,2]
		  , segments: [2,3,4]
		})
		var boxC = Box({
			size: 1
		  , segments: 1
		})
		
		
		t.isEquivalent( boxA, box1 )
		t.isEquivalent( boxB, box2 )
		t.isEquivalent( boxC, box1 )
	})
})